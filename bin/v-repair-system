#!/bin/bash
# info: fix hestiacp system
#
# example: v-repair-system
#
# This function is for correcting the hestiacp problems and
# derivative file system problems

#----------------------------------------------------------#
#                Variables & Functions                     #
#----------------------------------------------------------#

# Includes
# shellcheck source=/etc/hestiacp/hestia.conf
source /etc/hestiacp/hestia.conf
# shellcheck source=/usr/local/hestia/func/main.sh
source $HESTIA/func/main.sh
# load config file
source_conf "$HESTIA/conf/hestia.conf"

#
# function check_ownership
#
# @param string full path directory
#
# @param string ownership
# @example "root:root"
#
# @param string recursive
# values "0" - no; "1" - yes
#
# @param excludes
# @example "test ssl base"
#
check_ownership() {
	recursive="0"
	exclusions=""
	if [[ -z $0 ]]; then
		echo "Error Invalid Directory/file: '$0' 1st parameter cannot be empty"
		exit 1
	fi
	if [[ -z $1 ]]; then
		echo "Error Invalid permissions: '$1' 2nd parameter cannot be empty"
		exit 1
	fi
	ownership_regex="^[0-9a-fA-F_-]{,1}[:][0-9a-fA-F_-]{,1}$"
	if [[ $1 =~ $ownership_regex ]]; then
		ownership="$1"
	else
		echo "Error ownership format: '$1' the format must be 'example:example'"
		exit 1
	fi
	if [[ -d $0 || -f $0 ]]; then
		dir_file=$0
	else
		echo "'$dir_file' is not valid"
		exit 1
	fi
	if [[ -n $2 && $2 == "1" && -d $0 ]]; then
		recursive="1"
	fi
	if [[ -n $3 ]]; then
		exclusions=$3
	fi
	if [[ -f $0 ]]; then
		file_ownership=$(stat -c %U:%G "$dir_file")
		if [[ $file_ownership != $ownership ]]; then
			$(chown $ownership $dir_file) > /dev/null 2>&1
		fi
	else
		dir_ownership=$(stat -c %U:%G "$dir_file")

		main_dir=$(ls $dir_file)
		if [[ $dir_ownership != $ownership ]]; then
			$(chown $ownership $dir_file) > /dev/null 2>&1
		fi
		for dir_or_file in $main_dir; do
			bypass="0"
			if [[ $exclusions != "" ]]; then
				for exclude in $exclusions; do
					if [[ $exclude == $dir_or_file || $exclude == "$dir_file/$dir_or_file" ]]; then
						bypass="1"
					fi
				done
			fi
			if [[ $bypass == "0" ]]; then
				working_file_or_dir="$dir_file/$dir_or_file"
				dir_or_file_ownership=$(stat -c %U:%G "$working_file_or_dir")
				if [[ $dir_or_file_ownership != $ownership ]]; then
					$(chown $ownership $working_file_or_dir) > /dev/null 2>&1
				fi
				if [[ $recursive == "1" && -d $working_file_or_dir ]]; then
					check_ownership $working_file_or_dir $ownership $recursive
				fi
			fi
		done
	fi
}

#----------------------------------------------------------#
#               check hestia directories                   #
#----------------------------------------------------------#
echo "Checking and correcting Hestia Directory ownerships"
hestia_exclusions="data ssl web"
echo "Base:"
$(check_ownership $HESTIA "root:root" "1" "$hestia_exclusions") > /dev/null 2>&1

# Session
echo "Session"
$(check_ownership "$HESTIA/data/sessions" "admin:admin" "1") > /dev/null 2>&1

# File manager
echo "File Manager"
$(check_ownership "$HESTIA/web/fm/private" "admin:admin") > /dev/null 2>&1
$(check_ownership "$HESTIA/web/fm/private/tmp" "admin:admin") > /dev/null 2>&1
$(check_ownership "$HESTIA/web/fm/private/logs" "admin:admin") > /dev/null 2>&1
$(check_ownership "$HESTIA/web/fm/private/logs/app.log" "admin:admin") > /dev/null 2>&1
$(check_ownership "$HESTIA/web/fm/repository" "admin:admin") > /dev/null 2>&1

# Mail
echo "Mail"
$(check_ownership "$HESTIA/ssl/certificate.key" "Debian-exim:mail") > /dev/null 2>&1
$(check_ownership "$HESTIA/ssl/certificate.crt" "Debian-exim:mail") > /dev/null 2>&1

# Missing dir: $HESTIA/ssl/mail/*
echo "Mail Server Certificates"
$(check_ownership "$HESTIA/ssl/mail" "Debian-exim:mail" "1") > /dev/null 2>&1

# Done HestiaCP Ownership

#----------------------------------------------------------#
#      check hestia base package package checksums         #
#----------------------------------------------------------#
echo "Checking Dependencies"
echo "dependency: 'debsums'"
hestiacp_checksum_installed_package=$(dpkg -l | grep -e debsums) > /dev/null 2>&1
if [[ -z "$hestiacp_checksum_installed_package" ]]; then
	echo "Updating apt repository"
	$(apt update) > /dev/null 2>&1
	echo "done"
	echo "Installing Dependency $(debsums)"
	$(apt install debsums -y) > /dev/null 2>&1
	echo "Installed"
else
	echo "Already Installed"
fi

echo "Checking HestiaCP install, packages: 'hestia', 'hestia-php', 'hestia-nginx'"
echo "Base package: hestia"

hestia_base_checksums=$(debsums hestia | grep "FAILED" | awk '{print $1}' | awk '{printf "%s ",$0} END {print ""}')
allowed_files=(
	"$HESTIA/web/favicon.ico"
	"$HESTIA/web/images/favicon.png"
	"$HESTIA/web/images/logo-header.svg"
	"$HESTIA/web/images/logo.png"
	"$HESTIA/web/images/logo.svg"
)
repair_install="0"
for file in $hestia_base_checksums; do
	if [[ $repair_install == "1" ]]; then
		break
	fi
	find_in_array=$(echo "${allowed_files[@]}" | grep -ow "$file" | wc -w)
	if [[ $find_in_array != 1 ]]; then
		repair_install="1"
	fi
done

if [[ $repair_install == "1" ]]; then
	echo "reinstall needed: 'hestia'"
else
	echo "package 'hestia' is OK"
fi

#----------------------------------------------------------#
#       check hestia php package package checksums         #
#----------------------------------------------------------#
echo "Base package: hestia-php"
hestia_php_checksums=$(debsums hestia-php | grep "FAILED" | awk '{print $1}' | awk '{printf "%s ",$0} END {print ""}')
if [[ -n $hestia_php_checksums ]]; then
	echo "reinstall needed: 'hestia-php'"
else
	echo "package 'hestia-php' is OK"
fi

#----------------------------------------------------------#
#      check hestia nginx package package checksums        #
#----------------------------------------------------------#
echo "Base package: hestia-nginx"
hestia_nginx_checksums=$(debsums hestia-nginx | grep "FAILED" | awk '{print $1}' | awk '{printf "%s",$0} END {print ""}')

reinstall_hestia_nginx="0"
if [[ -n $hestia_nginx_checksums ]]; then
	if [[ $hestia_nginx_checksums != "$HESTIA/nginx/conf/nginx.conf" ]]; then
		reinstall_hestia_nginx="1"
		echo "reinstall needed: 'hestia-nginx'"
	fi
fi
if [[ $reinstall_hestia_nginx == "1" ]]; then
	echo "reinstall needed: 'hestia-nginx'"
else
	echo "package 'hestia-nginx' is OK"
fi
