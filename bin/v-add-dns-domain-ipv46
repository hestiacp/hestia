#!/bin/bash
# info: add dns domain
# options: USER DOMAIN IPV4 [IPV6] [NS1] [NS2] [NS3] [NS4] [NS5] [NS6] [NS7] [NS8] [RESTART] [DNSSEC]
#
# example: v-add-dns-domain admin example.com 192.168.0.1 1111:2222:3333:111 ns1.example.com ns2.example.com '' '' '' '' '' '' yes
#
# This function adds DNS zone with records defined in the template. If the exp
# argument isn't stated, the expiration date value will be set to next year.
# The soa argument is responsible for the relevant record. By default the first
# user's NS server is used. TTL is set as common for the zone and for all of
# its records with a default value of 14400 seconds.

#----------------------------------------------------------#
#                Variables & Functions                     #
#----------------------------------------------------------#

# Argument definition
user=${1}
domain=${2}
ip=${3}
ipv6=${4}
ns1=$(echo ${5} | sed -e 's/\.*$//g' -e 's/^\.*//g')
ns2=$(echo ${6} | sed -e 's/\.*$//g' -e 's/^\.*//g')
ns3=$(echo ${7} | sed -e 's/\.*$//g' -e 's/^\.*//g')
ns4=$(echo ${8} | sed -e 's/\.*$//g' -e 's/^\.*//g')
ns5=$(echo ${9} | sed -e 's/\.*$//g' -e 's/^\.*//g')
ns6=$(echo ${10} | sed -e 's/\.*$//g' -e 's/^\.*//g')
ns7=$(echo ${11} | sed -e 's/\.*$//g' -e 's/^\.*//g')
ns8=$(echo ${12} | sed -e 's/\.*$//g' -e 's/^\.*//g')
restart=${13}
dnssec=${14}

# Includes
# shellcheck source=/etc/hestiacp/hestia.conf
source /etc/hestiacp/hestia.conf
# shellcheck source=/usr/local/hestia/func/main.sh
source "$HESTIA/func/main.sh"
# shellcheck source=/usr/local/hestia/func/domain.sh
source "$HESTIA/func/domain.sh"
# shellcheck source=/usr/local/hestia/func/rebuild.sh
source "$HESTIA/func/rebuild.sh"
# load config file
source_conf "$HESTIA/conf/hestia.conf"

# Additional argument formatting
format_domain
format_domain_idn
domain_utf=$(idn2 --quiet -d "$domain_idn")

#----------------------------------------------------------#
#                    Verifications                         #
#----------------------------------------------------------#

check_args '3' "$#" 'USER DOMAIN [IPV4] [IPV6] [NS1] [NS2] [NS3] [..] [NS8] [RESTART] [DNSSEC]'
is_format_valid 'user' 'domain' 'ip' 'ipv6'
is_system_enabled "$DNS_SYSTEM" 'DNS_SYSTEM'
is_object_valid 'user' 'USER' "$user"
is_object_unsuspended 'user' 'USER' "$user"

users_domain_utf=$("$BIN/v-list-dns-domains" "$user" list | sed -ne "/$domain_utf/p")
if [ "$users_domain_utf" != "$domain" ]; then
	is_domain_new 'dns' "$domain_utf"
fi
users_domain_idn=$("$BIN/v-list-dns-domains" "$user" list | sed -ne "/$domain_idn/p")
if [ "$users_domain_idn" != "$domain" ]; then
	is_domain_new 'dns' "$domain_idn"
else
	is_domain_new 'dns' "$domain"
fi
if [ -n "$(get_ip_format "$domain")" ]; then
	echo "Error: Invalid domain format. IP address detected as input."
	exit 1
fi

if [ -n "$restart" ]; then
	is_format_valid 'restart'
fi

if [ -n "$dnssec" ]; then
	is_boolean_format_valid "$dnssec" 'dnssec'
fi

is_package_full 'DNS_DOMAINS'
template=$(get_user_value '$DNS_TEMPLATE')
is_dns_template_valid "$template"

is_base_domain_owner "$domain"

if [ -n "$ns1" ]; then
	is_format_valid 'ns1'
fi
if [ -n "$ns2" ]; then
	is_format_valid 'ns2'
fi
if [ -n "$ns3" ]; then
	is_format_valid 'ns3'
fi
if [ -n "$ns4" ]; then
	is_format_valid 'ns4'
fi
if [ -n "$ns5" ]; then
	is_format_valid 'ns5'
fi
if [ -n "$ns6" ]; then
	is_format_valid 'ns6'
fi
if [ -n "$ns7" ]; then
	is_format_valid 'ns7'
fi
if [ -n "$ns8" ]; then
	is_format_valid 'ns8'
fi

# Perform verification if read-only mode is enabled
check_hestia_demo_mode

#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

# Defining NS variables
if [ -z "$ns2" ]; then
	get_dns_values # get DNS values, nameservers
fi
soa="$ns1"
exp=$(date +%F -d "+ 1 year")
serial=$(date +'%Y%m%d01')
ttl=14400

# Generating timestamp
time_n_date=$(date +'%T %F')
time=$(echo "$time_n_date" | cut -f 1 -d \ )
date=$(echo "$time_n_date" | cut -f 2 -d \ )

# Create DNS domain config
create_dns_domain_config
records=$(cat "$USER_DATA/dns/$domain.conf" | wc -l)

# Adding dns.conf record
dns_rec="DOMAIN='$domain' IP='$ip' IP6='$ipv6' TPL='$template' TTL='$ttl' EXP='$exp'"
dns_rec="$dns_rec SOA='$soa' SERIAL='$serial' SRC='' RECORDS='$records'"
dns_rec="$dns_rec DNSSEC='$dnssec' KEY='' SLAVE='no' MASTER='' SUSPENDED='no' TIME='$time' DATE='$date'"

echo "$dns_rec" >> "$USER_DATA/dns.conf"
chmod 660 "$USER_DATA/dns.conf"

rebuild_dns_domain_conf

# Updating dns-cluster queue
if [ "$DNS_CLUSTER" = "yes" ]; then
	cmd="$BIN/v-add-remote-dns-domain $user $domain yes"
	echo "$cmd" >> "$HESTIA/data/queue/dns-cluster.pipe"
fi

#----------------------------------------------------------#
#                       Hestia                             #
#----------------------------------------------------------#

# Increasing domain value
increase_user_value "$user" '$U_DNS_DOMAINS'
increase_user_value "$user" '$U_DNS_RECORDS' "$records"

# Restart named
"$BIN/v-restart-dns" "$restart"
check_result $? "DNS restart failed"

# Logging
"$BIN/v-log-action" "$user" "Info" "DNS" "Added new DNS domain (Name: $domain)."
log_event "$OK" "$ARGUMENTS"

exit
